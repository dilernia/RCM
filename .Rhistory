}
}
}
return(Dstat)
} else {
NULL
}
}))
# Calculating sparsity level
sparsity <- 1 - mean(sapply(thetaMats, FUN = function(m) {
unlist(m[lower.tri(m, diag = FALSE)])}))
if (!is.null(ncol(eStatMats[[1]]))) {
results <- data.frame(D = Dstat / choose(n = ncol(eStatMats[[1]]), k = 2),
Sparsity = sparsity, Lambda = lambda)
return(results)
} else {
return(data.frame(D = NA, Sparsity = NA, Lambda = lambda))
}
}
dResults <- do.call("rbind", lapply(X = 1:nrow(lambs), FUN = dCalc))
dResults$dBar <- NA
# Calculating dBar value for each lambda
for (r in 1:nrow(dResults)) {
if (!is.na(dResults[r, c("D")])) {
thresh <- as.numeric(dResults[r, "Sparsity"])
dResults[r, c("dBar")] <- max(unlist(dResults[which(dResults$Sparsity >= thresh), c("D")]))
}
}
# Calculating optimal lambda value
if (length(which(dResults$dBar <= beta)) > 0) {
optSparse <- min(unlist(dResults[which(dResults$dBar <= beta), c("Sparsity")]))
optD <- min(unlist(dResults[which(dResults$dBar <= beta & dResults$Sparsity == optSparse), c("D")]))
} else {
# Displaying a warning that instability was never low enough
warning(paste0("Minimum instability of ", round(min(dResults$dBar), 3), " not less than beta = ", beta,
". Returning maximum sparsity result."))
optSparse <- max(dResults$Sparsity)
optD <- min(dResults[which(dResults$Sparsity == optSparse), "D"])
}
starLamb <- cbind(lambs[dResults[which(dResults$Sparsity == optSparse & dResults$D == optD),
"Lambda"], ], sparsity = optSparse)
return(starLamb)
}
datf = myData$simDat
lambs = lambdas
N = 10
method = "RCCM"
beta = 0.05; z0s = NULL; ncores = NULL;
ns <- sapply(datf, FUN = nrow)
K <- length(datf)
# Setting b: size of subsamples, N: number of subsamples to draw, beta: ceiling for instability measure
bs <- sapply(ns, FUN = function(x) {
if (x > 100) {
floor(10 * sqrt(x))
}
else {
floor(0.75 * (x))}})
# Drawing subsamples each of size b from data until
# N unique subsamples have been collected
keeper <- function(b, n) {
keepInds <- matrix(NA, nrow = b, ncol = N)
while (ncol(unique(keepInds, MARGIN = 2)) < N) {
for (s in 1:N) {
keepInds[, s] <- sort(sample(x = 1:n, size = b, replace = FALSE))
}
}
return(keepInds)
}
keepInds <- mapply(FUN = keeper, n = ns, b = bs, SIMPLIFY = FALSE)
# Reducing lambdas when possible
if (method == "GLasso") {
lambs <- data.frame(lambda1 = unique(lambs$lambda1), lambda2 = NA, lambda3 = NA)
} else if (method %in% c("FGL", "GGL")) {
lambs <- expand.grid(lambda1 = unique(lambs$lambda1), lambda2 = unique(lambs$lambda2), lambda3 = NA)
} else if (method %in% c("RCCM", "RCM")) {
lambs <- lambs
}
# Updating number of needed cores
if(is.null(ncores)) {
ncores <- 1
}
ncores <- min(c(ncores, nrow(lambs)))
# Implement select method for each of N bootstrap subsamples and obtaining networks
starNets <- lapply(1:N, FUN = function(i) {
# Obtaining ith bootstrap sample of data
subDats <- lapply(1:K, FUN = function(k) {
datf[[k]][keepInds[[k]][, i], ]})
# Running rccm method for bootstrap sample for each lambda combination in parallel if requested
if (ncores > 1) {
`%dopar%` <- foreach::`%dopar%`
cl <- parallel::makeCluster(ncores) # creates a cluster with <ncore> cores
doParallel::registerDoParallel(cl) # register the cluster
nets <- foreach::foreach(t = 1:nrow(lambs),
.export = c("method", "G", "K", "lambs", "z0s")) %dopar% {
listRes <- NULL
tryCatch({
if (method == "RCCM") {
arrayRes <- rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
} else if (method == "GLasso") {
listRes <- lapply(subDats, FUN = function(x) {
adj(glasso::glasso(cov(x), rho = lambs[t, "lambda1"] / 100, penalize.diagonal = FALSE)$wi)})
} else if (method %in% c("GGL", "FGL")) {
listRes <- lapply(JGL::JGL(Y = subDats, penalty = ifelse(method == "GGL", "group", "fused"),
penalize.diagonal = FALSE,
lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50 / 1000,
return.whole.theta = TRUE)$theta, FUN = adj)
} else if (method == "RCM") {
arrayRes <- randCov(x = subDats, lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50,
lambda3 = lambs[t, "lambda3"] / 100000)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
}
}, error = function(e) {
warning(paste0("stARS failed for lambda1 = ", lambs[t, "lambda1"], ", lambda2 = ",
lambs[t, "lambda2"], ", lambda3 = ", lambs[t, "lambda3"]))
return(NULL)
})
return(listRes)
}
parallel::stopCluster(cl)
} else {
nets <- lapply(1:nrow(lambs), FUN = function(t) {
tryCatch({
if (method == "RCCM") {
arrayRes <- rcm::rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
} else if (method == "GLasso") {
listRes <- lapply(subDats, FUN = function(x) {
adj(glasso::glasso(cov(x), rho = lambs[t, "lambda1"] / 100,
penalize.diagonal = FALSE)$wi)})
} else if (method %in% c("GGL", "FGL")) {
listRes <- lapply(JGL::JGL(Y = subDats, penalty = ifelse(method == "GGL", "group", "fused"),
penalize.diagonal = FALSE,
lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50 / 1000,
return.whole.theta = TRUE)$theta, FUN = adj)
} else if (method == "RCM") {
arrayRes <- randCov(x = subDats, lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50,
lambda3 = lambs[t, "lambda3"] / 100000)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
}
return(listRes)
}, error = function(e) {
warning(paste0("stARS failed for lambda1 = ", lambs[t, "lambda1"], ", lambda2 = ",
lambs[t, "lambda2"], ", lambda3 = ", lambs[t, "lambda3"]))
return(NULL)
})
})
}
return(nets)
})
warnings()
View(datf)
# Function for calculating total instability statistic (D stat) for each lambda
dCalc <- function(lambda, aMats = starNets) {
# Subsetting to only include matrices for input lambda value
aMats <- lapply(aMats, FUN = function(m) {
m[[lambda]]})
# Calculating theta and E matrices
thetaMats <- lapply(1:K, FUN = function(k) {
Reduce("+", lapply(aMats, FUN = function(m) {
m[[k]]})) /
sum(sapply(aMats, FUN = function(m) {
!is.null(m[[k]])}))})
eStatMats <- lapply(thetaMats, FUN = function(m) {
2 * m * (1 - m)})
# Calculating total instability statistic (D stat)
Dstat <- mean(sapply(eStatMats, FUN = function(x) {
if (!is.null(dim(x))) {
Dstat <- 0
for (r in 1:nrow(x)) {
for (c in 1:ncol(x)) {
if (r < c) {
Dstat <- Dstat + x[r, c]
}
}
}
return(Dstat)
} else {
NULL
}
}))
# Calculating sparsity level
sparsity <- 1 - mean(sapply(thetaMats, FUN = function(m) {
unlist(m[lower.tri(m, diag = FALSE)])}))
if (!is.null(ncol(eStatMats[[1]]))) {
results <- data.frame(D = Dstat / choose(n = ncol(eStatMats[[1]]), k = 2),
Sparsity = sparsity, Lambda = lambda)
return(results)
} else {
return(data.frame(D = NA, Sparsity = NA, Lambda = lambda))
}
}
dResults <- do.call("rbind", lapply(X = 1:nrow(lambs), FUN = dCalc))
dResults$dBar <- NA
# Calculating dBar value for each lambda
for (r in 1:nrow(dResults)) {
if (!is.na(dResults[r, c("D")])) {
thresh <- as.numeric(dResults[r, "Sparsity"])
dResults[r, c("dBar")] <- max(unlist(dResults[which(dResults$Sparsity >= thresh), c("D")]))
}
}
# Calculating optimal lambda value
if (length(which(dResults$dBar <= beta)) > 0) {
optSparse <- min(unlist(dResults[which(dResults$dBar <= beta), c("Sparsity")]))
optD <- min(unlist(dResults[which(dResults$dBar <= beta & dResults$Sparsity == optSparse), c("D")]))
} else {
# Displaying a warning that instability was never low enough
warning(paste0("Minimum instability of ", round(min(dResults$dBar), 3), " not less than beta = ", beta,
". Returning maximum sparsity result."))
optSparse <- max(dResults$Sparsity)
optD <- min(dResults[which(dResults$Sparsity == optSparse), "D"])
}
starLamb <- cbind(lambs[dResults[which(dResults$Sparsity == optSparse & dResults$D == optD),
"Lambda"], ], sparsity = optSparse)
lambs[dResults[which(dResults$Sparsity == optSparse & dResults$D == optD)
]
]
lambs[dResults[which(dResults$Sparsity == optSparse & dResults$D == optD),
+                                    "Lambda"], ]
lambs[dResults[which(dResults$Sparsity == optSparse & dResults$D == optD),
"Lambda"], ]
View(dResults)
unlink('docs/exampleSimulationRCCM_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align="center",
message = F, warning = F)
# Install version of package used for Biostatistics submission
if("rccm" %in% installed.packages() == FALSE) {
devtools::install_github("dilernia/rccm@biostatistics")
}
# Load rcm package
library(rccm)
# Loading other packages
library(tidyverse, quietly = T)
library(kableExtra, quietly = T)
# Display help file
?rccSim
# Simulate data
set.seed(1994)
G <- 2
p <- 10
myData <- rccSim(G = G, clustSize = 20, p = p, n = 177, overlap = 0.20, rho = 0.10)
# Standardizing data
myData$simDat <- lapply(myData$simDat, FUN = scale)
# Display help file
?starsRccm
# Grid of tuning parameters to search over
lambdas <- expand.grid(lambda1 = c(1, 5, 15, 25, 35, 40),
lambda2 = c(1000, 3000, 5000), lambda3 = 20)
# Find optimal tuning parameter set using modified stARS with 10 bootstrap samples
optTune <- starsRccm(datf = myData$simDat, lambs = lambdas, G = G, N = 10, method = "RCCM")
datf = myData$simDat
lambs = lambdas
N = 10
method = "RCCM"
beta = 0.05; z0s = NULL; ncores = NULL;
ns <- sapply(datf, FUN = nrow)
K <- length(datf)
# Setting b: size of subsamples, N: number of subsamples to draw, beta: ceiling for instability measure
bs <- sapply(ns, FUN = function(x) {
if (x > 100) {
floor(10 * sqrt(x))
}
else {
floor(0.75 * (x))}})
# Drawing subsamples each of size b from data until
# N unique subsamples have been collected
keeper <- function(b, n) {
keepInds <- matrix(NA, nrow = b, ncol = N)
while (ncol(unique(keepInds, MARGIN = 2)) < N) {
for (s in 1:N) {
keepInds[, s] <- sort(sample(x = 1:n, size = b, replace = FALSE))
}
}
return(keepInds)
}
keepInds <- mapply(FUN = keeper, n = ns, b = bs, SIMPLIFY = FALSE)
# Reducing lambdas when possible
if (method == "GLasso") {
lambs <- data.frame(lambda1 = unique(lambs$lambda1), lambda2 = NA, lambda3 = NA)
} else if (method %in% c("FGL", "GGL")) {
lambs <- expand.grid(lambda1 = unique(lambs$lambda1), lambda2 = unique(lambs$lambda2), lambda3 = NA)
} else if (method %in% c("RCCM", "RCM")) {
lambs <- lambs
}
# Updating number of needed cores
if(is.null(ncores)) {
ncores <- 1
}
ncores <- min(c(ncores, nrow(lambs)))
View(keepInds)
i = 1
# Obtaining ith bootstrap sample of data
subDats <- lapply(1:K, FUN = function(k) {
datf[[k]][keepInds[[k]][, i], ]})
# Running rccm method for bootstrap sample for each lambda combination in parallel if requested
if (ncores > 1) {
`%dopar%` <- foreach::`%dopar%`
cl <- parallel::makeCluster(ncores) # creates a cluster with <ncore> cores
doParallel::registerDoParallel(cl) # register the cluster
nets <- foreach::foreach(t = 1:nrow(lambs),
.export = c("method", "G", "K", "lambs", "z0s")) %dopar% {
listRes <- NULL
tryCatch({
if (method == "RCCM") {
arrayRes <- rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
} else if (method == "GLasso") {
listRes <- lapply(subDats, FUN = function(x) {
adj(glasso::glasso(cov(x), rho = lambs[t, "lambda1"] / 100, penalize.diagonal = FALSE)$wi)})
} else if (method %in% c("GGL", "FGL")) {
listRes <- lapply(JGL::JGL(Y = subDats, penalty = ifelse(method == "GGL", "group", "fused"),
penalize.diagonal = FALSE,
lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50 / 1000,
return.whole.theta = TRUE)$theta, FUN = adj)
} else if (method == "RCM") {
arrayRes <- randCov(x = subDats, lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50,
lambda3 = lambs[t, "lambda3"] / 100000)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
}
}, error = function(e) {
warning(paste0("stARS failed for lambda1 = ", lambs[t, "lambda1"], ", lambda2 = ",
lambs[t, "lambda2"], ", lambda3 = ", lambs[t, "lambda3"]))
return(NULL)
})
return(listRes)
}
parallel::stopCluster(cl)
} else {
nets <- lapply(1:nrow(lambs), FUN = function(t) {
tryCatch({
if (method == "RCCM") {
arrayRes <- rcm::rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
} else if (method == "GLasso") {
listRes <- lapply(subDats, FUN = function(x) {
adj(glasso::glasso(cov(x), rho = lambs[t, "lambda1"] / 100,
penalize.diagonal = FALSE)$wi)})
} else if (method %in% c("GGL", "FGL")) {
listRes <- lapply(JGL::JGL(Y = subDats, penalty = ifelse(method == "GGL", "group", "fused"),
penalize.diagonal = FALSE,
lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50 / 1000,
return.whole.theta = TRUE)$theta, FUN = adj)
} else if (method == "RCM") {
arrayRes <- randCov(x = subDats, lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50,
lambda3 = lambs[t, "lambda3"] / 100000)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
}
return(listRes)
}, error = function(e) {
warning(paste0("stARS failed for lambda1 = ", lambs[t, "lambda1"], ", lambda2 = ",
lambs[t, "lambda2"], ", lambda3 = ", lambs[t, "lambda3"]))
return(NULL)
})
})
}
return(nets)
warnings()
k = 1
atf[[k]][keepInds[[k]][, i], ]})
# Running rccm method for bootstrap sample for each lambda combination in parallel if requested
if (ncores > 1) {
`%dopar%` <- foreach::`%dopar%`
cl <- parallel::makeCluster(ncores) # creates a cluster with <ncore> cores
doParallel::registerDoParallel(cl) # register the cluster
nets <- foreach::foreach(t = 1:nrow(lambs),
.export = c("method", "G", "K", "lambs", "z0s")) %dopar% {
listRes <- NULL
tryCatch({
if (method == "RCCM") {
arrayRes <- rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
} else if (method == "GLasso") {
listRes <- lapply(subDats, FUN = function(x) {
adj(glasso::glasso(cov(x), rho = lambs[t, "lambda1"] / 100, penalize.diagonal = FALSE)$wi)})
} else if (method %in% c("GGL", "FGL")) {
listRes <- lapply(JGL::JGL(Y = subDats, penalty = ifelse(method == "GGL", "group", "fused"),
penalize.diagonal = FALSE,
lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50 / 1000,
return.whole.theta = TRUE)$theta, FUN = adj)
} else if (method == "RCM") {
arrayRes <- randCov(x = subDats, lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50,
lambda3 = lambs[t, "lambda3"] / 100000)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
}
}, error = function(e) {
warning(paste0("stARS failed for lambda1 = ", lambs[t, "lambda1"], ", lambda2 = ",
lambs[t, "lambda2"], ", lambda3 = ", lambs[t, "lambda3"]))
return(NULL)
})
return(listRes)
}
parallel::stopCluster(cl)
} else {
nets <- lapply(1:nrow(lambs), FUN = function(t) {
tryCatch({
if (method == "RCCM") {
arrayRes <- rcm::rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
} else if (method == "GLasso") {
listRes <- lapply(subDats, FUN = function(x) {
adj(glasso::glasso(cov(x), rho = lambs[t, "lambda1"] / 100,
penalize.diagonal = FALSE)$wi)})
} else if (method %in% c("GGL", "FGL")) {
listRes <- lapply(JGL::JGL(Y = subDats, penalty = ifelse(method == "GGL", "group", "fused"),
penalize.diagonal = FALSE,
lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50 / 1000,
return.whole.theta = TRUE)$theta, FUN = adj)
} else if (method == "RCM") {
arrayRes <- randCov(x = subDats, lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50,
lambda3 = lambs[t, "lambda3"] / 100000)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
}
return(listRes)
}, error = function(e) {
warning(paste0("stARS failed for lambda1 = ", lambs[t, "lambda1"], ", lambda2 = ",
lambs[t, "lambda2"], ", lambda3 = ", lambs[t, "lambda3"]))
return(NULL)
})
})
}
# Obtaining ith bootstrap sample of data
subDats <- lapply(1:K, FUN = function(k) {
datf[[k]][keepInds[[k]][, i], ]})
nets <- lapply(1:nrow(lambs), FUN = function(t) {
tryCatch({
if (method == "RCCM") {
arrayRes <- rcm::rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
} else if (method == "GLasso") {
listRes <- lapply(subDats, FUN = function(x) {
adj(glasso::glasso(cov(x), rho = lambs[t, "lambda1"] / 100,
penalize.diagonal = FALSE)$wi)})
} else if (method %in% c("GGL", "FGL")) {
listRes <- lapply(JGL::JGL(Y = subDats, penalty = ifelse(method == "GGL", "group", "fused"),
penalize.diagonal = FALSE,
lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50 / 1000,
return.whole.theta = TRUE)$theta, FUN = adj)
} else if (method == "RCM") {
arrayRes <- randCov(x = subDats, lambda1 = lambs[t, "lambda1"] / 100,
lambda2 = lambs[t, "lambda2"] / 50,
lambda3 = lambs[t, "lambda3"] / 100000)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
}
return(listRes)
}, error = function(e) {
warning(paste0("stARS failed for lambda1 = ", lambs[t, "lambda1"], ", lambda2 = ",
lambs[t, "lambda2"], ", lambda3 = ", lambs[t, "lambda3"]))
return(NULL)
})
}
)
warnings()
t = 1
arrayRes <- rcm::rccm(subDats, lambda1 = lambs[t, "lambda1"], lambda2 = lambs[t, "lambda2"],
lambda3 = lambs[t, "lambda3"], nclusts = G, z0s = z0s)$Omegas
listRes <- lapply(lapply(1:K, FUN = function(k) {
arrayRes[, , k]}), FUN = adj)
remove.packages('rccm')
# Install version of package used for Biostatistics submission
if("rccm" %in% installed.packages() == FALSE) {
devtools::install_github("dilernia/rccm@biostatistics")
}
# Load rcm package
library(rccm)
# Loading other packages
library(tidyverse, quietly = T)
library(kableExtra, quietly = T)
remove.packages('rccm')
# Install version of package used for Biostatistics submission
if("rccm" %in% installed.packages() == FALSE) {
devtools::install_github("dilernia/rccm@biostatistics")
}
# Load rcm package
library(rccm)
# Loading other packages
library(tidyverse, quietly = T)
library(kableExtra, quietly = T)
unlink('docs/exampleSimulationRCCM_cache', recursive = TRUE)
