# demo file to run random covariance model for simulated data

library(glasso)
library(abind)
library(plyr)
library(BDgraph)
# library(foreach)
# library(doParallel)

source('rand_cov.R') # load function
source('bic_cal.R') # load function
load('sim_data.rda') # load data


# parameters to tune: lambda1, lambda2, and lambda3
lam2.cand = 100 ; lam3.cand = 0.0001
    lam1.cand = c(0.0002,0.0006,0.0008,seq(0.001,0.006,by=0.001),0.008,0.01,0.015,0.02)
lams.cand <- expand.grid(lam1.cand,lam2.cand,lam3.cand)


lam2.cand = 70 ; lam3.cand = 0.0001
    lam1.cand = c(0.0002,0.0006,0.0008,seq(0.001,0.006,by=0.001),0.008,0.01,0.015,0.02)
lams.cand <- rbind(lams.cand,expand.grid(lam1.cand,lam2.cand,lam3.cand))


lam2.cand = 40 ; lam3.cand = 0.001
    lam1.cand = c(0.0002,0.0006,0.0008,seq(0.001,0.006,by=0.001),0.008,0.01,0.015,0.02)
lams.cand <- rbind(lams.cand,expand.grid(lam1.cand,lam2.cand,lam3.cand))


colnames(lams.cand) <- c('lam1','lam2','lam3')
nlams <- nrow(lams.cand)


x <- sim.dat

K = length(x); p = ncol(x[[1]])

uptri.mat0 <- diag(0,p); uptri.mat0[upper.tri(diag(p))] <- 1
uptri.matk <- array(uptri.mat0,c(p,p,K))


Omega0.est <- array(NA,c(p,p,nlams))
Omegas.est <- array(NA,c(p,p,K,nlams))
bic.rc <- mbic.rc<- array(NA,nlams)


for(j in 1:nlams) {

                      
    # regularizing parameters
    lam1 <- lams.cand[j,1]*(1+lams.cand[j,2])
    lam2 <- lams.cand[j,2]*K;
    lam3 <- lams.cand[j,3]
    
    
    # estimation
    est <- rand_cov(x,lam1,lam2,lam3)
    Omega0 <- est$Omega0
    Omegas <- est$Omegas
    
    Omega0.est[,,j] <- Omega0
    Omegas.est[,,,j] <- Omegas
    
    # calculate BIC
    bic.rc[j] <- bic_cal(x,Omegas)
    mbic.rc[j] <- mbic_cal(x,Omega0,Omegas,lams.cand[j,2])
    
    # keep track 
    if(j < nlams & lams.cand[j+1,2] != lams.cand[j,2]) cat('lam2 =',lams.cand[j,2],'is done \n')
    
    
}  # end of loop for all lambdas


Omega0.rc <- Omega0.est[,,which.min(mbic.rc)]
Omegas.rc <- Omegas.est[,,,which.min(mbic.rc)]

Gk.rc <- (round(Omegas.rc,3) != 0) - array(diag(p),c(p,p,K))
G0.rc <- (round(Omega0.rc,3) != 0) - diag(p)

uptri.mat0 <- diag(0,p); uptri.mat0[upper.tri(diag(p))] <- 1
uptri.matk <- array(uptri.mat0,c(p,p,K))

TPRk <- sum( Gk.rc*uptri.matk & Gk.true ) / sum(Gk.true)
FPRk <- sum( Gk.rc*uptri.matk & (uptri.matk-Gk.true) ) / sum(uptri.matk-Gk.true)
TPRg <- sum( G0.rc*uptri.mat0 & G.true ) / sum(G.true)
FPRg <- sum( G0.rc*uptri.mat0 & (uptri.mat0-G.true) ) /sum(uptri.mat0-G.true)

print(c(TPRk,FPRk,TPRg,FPRg))
# 0.92929293 0.04929396 0.95959596 0.01504844




